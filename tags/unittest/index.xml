<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Unittest on Dev. note</title><link>http://huijeong-kim.github.io/tags/unittest/</link><description>Recent content in Unittest on Dev. note</description><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Sun, 28 Aug 2022 18:51:05 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/unittest/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust로 Parameterised Test 작성하기</title><link>http://huijeong-kim.github.io/post/2022-08-28-parameterised-test/</link><pubDate>Sun, 28 Aug 2022 18:51:05 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-28-parameterised-test/</guid><description>Unit test를 작성 하다 보면 간단한 함수에 대해서도 꽤나 많은 수의 테스트 케이스를 작성하게 됩니다. Input 값의 조합, 특히나 Invalid Input 값의 조합은 무지 많아질 수 있기 때문 입니다. 그 모든 케이스를 하나 씩 테스트로 작성 하는 것은 꽤 귀찮기도 하고, 테스트 함수 작명 지옥에 빠지면서 테스트 가독성도 떨어지게 됩니다.
이럴 때 사용할 수 있는 것이 table-driven test, 혹은 parameterised test 입니다. Input-Output 조합을 table로 표현하는 방식입니다.
Rust로 간단한 함수의 parameterised test를 작성해 보고, rust의 test-case, rtest crate를 활용해 이를 더 간편하게 작성하는 방법을 알아보겠습니다.</description></item></channel></rss>