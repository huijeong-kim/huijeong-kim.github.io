<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>enum on my dev note</title>
    <link>http://huijeong-kim.github.io/tags/enum/</link>
    <description>Recent content in enum on my dev note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr</language>
    <lastBuildDate>Sun, 29 Jan 2023 18:58:03 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/enum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polymorphism in Rust</title>
      <link>http://huijeong-kim.github.io/post/2023-01-29-rust-polymorphism/</link>
      <pubDate>Sun, 29 Jan 2023 18:58:03 +0900</pubDate>
      
      <guid>http://huijeong-kim.github.io/post/2023-01-29-rust-polymorphism/</guid>
      <description>안녕하세요. 오늘은 rust에서 polymorphism을 활용하는 방법을 정리해 보고자 합니다.
cpp 코드를 작성하던 습관 대로 Rust 코드를 작성하다 보면 막히는 부분 중 하나가 interface 클래스(pure virtual class)와 이를 통한 객체 전달 부분입니다. 단순히 trait으로 변환하여 코드를 작성하다 보면 쉽게 컴파일 에러 지옥에 빠지곤 하는데요..
아주 간단한 composite design pattern 예제를 구현해 보면서 rust의 polymorphism 에 대해 알아보도록 하겠습니다. Composite pattern 예제로 많이 사용되는 File, Directory 구조를 표현해 보고자 합니다. File은 이름과 크기를 갖고 있는 객체로, Directory는 이름과 하위 파일 및 디렉토리를 갖는 객체로, 그리고 File, Directory 는 모두 Node 라는 interface를 구현하게 만들고자 합니다.</description>
    </item>
    
  </channel>
</rss>
