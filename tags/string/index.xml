<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>String on my dev note</title>
    <link>http://huijeong-kim.github.io/tags/string/</link>
    <description>Recent content in String on my dev note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr</language>
    <lastBuildDate>Sun, 07 May 2023 19:02:30 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Rust Strings</title>
      <link>http://huijeong-kim.github.io/post/2023-05-07-exploring-rust-strings/</link>
      <pubDate>Sun, 07 May 2023 19:02:30 +0900</pubDate>
      
      <guid>http://huijeong-kim.github.io/post/2023-05-07-exploring-rust-strings/</guid>
      <description>안녕하세요.
오늘은 Rust의 문자열 개념을 간단하게 알아보고, 코드 작성 시 문자열 관련 혼란스러웠던 포인트들을 정리해 보고자 합니다.
1. String vs. str String 과 str 는 모두 valid UTF-8 문자열을 나타냅니다. Invalid UTF-8 데이터로 String 타입을 생성할 수 없습니다. UTF-8, Unicode 등에 대한 설명은 생략합니다.
Rust에서는 C와 같이 null-terminating string 개념을 사용하지 않습니다. 대신 String 타입은 문자열과 그 길이를 갖고 있는 &amp;ldquo;fat pointer&amp;rdquo; 입니다. &amp;ldquo;fat pointer&amp;quot;는 raw pointer과 additional metadata (e.g., length)를 갖고 있는 포인터를 의미합니다.</description>
    </item>
    
  </channel>
</rss>
