<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Async Rust on Dev. note</title><link>http://huijeong-kim.github.io/tags/async-rust/</link><description>Recent content in Async Rust on Dev. note</description><generator>Hugo -- 0.146.0</generator><language>kr</language><lastBuildDate>Sun, 11 Sep 2022 18:53:04 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/async-rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Async Programming</title><link>http://huijeong-kim.github.io/post/2022-09-11-rust-async-programming/</link><pubDate>Sun, 11 Sep 2022 18:53:04 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-09-11-rust-async-programming/</guid><description>&lt;p>오늘은 Rust에서 제공하는 Asynchronous Programming 관련 feature들에 대해 정리하면서, &lt;code>async&lt;/code> 관련 포스트를 쓸 때 마다 사용되는 단어들, &lt;code>async&lt;/code>, &lt;code>future&lt;/code>, &lt;code>runtime&lt;/code>, &lt;code>executor&lt;/code>에 대해 정리해 보겠습니다. 오늘은 유독 내용이 추상적인 느낌에 부족한 부분이 많은 것 같은데, 틀린 부분이나 부족한 부분이 있다면 코멘트 남겨 주세요 :)&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h2 id="asynchronous-programming">Asynchronous Programming&lt;/h2>
&lt;hr>
&lt;p>&lt;a href="https://rust-lang.github.io/async-book/01_getting_started/02_why_async.html">Async book&lt;/a>에는 Asynchronous programming이 다음과 같이 정의되어 있습니다.&lt;/p>
&lt;p> &lt;/p>
&lt;blockquote>
&lt;p>Asynchronous programming, or async for short, is a &lt;strong>&lt;u>concurrent programming model&lt;/u>&lt;/strong> supported by an increasing number of programming languages. It lets you run a large number of concurrent tasks on a small number of OS threads, while preserving much of the look and feel of ordinary synchronous programming, through the &lt;strong>&lt;u>async/await syntax&lt;/u>&lt;/strong>.&lt;/p></description></item><item><title>Async Rust에서 mpsc queue 사용하기</title><link>http://huijeong-kim.github.io/post/2022-08-27-tokio-mpsc/</link><pubDate>Sat, 27 Aug 2022 18:49:11 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-27-tokio-mpsc/</guid><description>&lt;p>mpsc(multi produce single consumer) queue는 thread 간 message를 주고받는 channel로 많이 쓰입니다. &lt;a href="https://doc.rust-lang.org/std/sync/mpsc/index.html">std mpsc&lt;/a>와 &lt;a href="https://docs.rs/crossbeam/latest/crossbeam/channel/index.html">crossbeam channel&lt;/a>가 많이 쓰이는 mpsc channel이고, async rust에서는 &lt;a href="https://docs.rs/tokio/1.20.1/tokio/sync/mpsc/index.html">tokio mpsc&lt;/a>를 사용할 수 있습니다.&lt;/p>
&lt;p>async rust에서 mpsc queue를 사용하는 방법을 알아보겠습니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="1-stdsyncmpsc-사용하기">1. std::sync::mpsc 사용하기&lt;/h3>
&lt;p>가장 먼저 &lt;code>std&lt;/code> 라이브러리의 mpsc를 사용해 볼 수 있겠습니다. Async rust에서 mpsc를 사용하려면 여러 future들이 message sender(tx)를 갖고 있고 하나의 future가 message receiver(rx)를 갖고 있어야 합니다. mpsc의 &lt;code>Sender&lt;/code>는 clone 가능하므로 다음과 같이 tx를 clone하여 여러 Future가 message channel을 공유할 수 있습니다.&lt;/p></description></item></channel></rss>