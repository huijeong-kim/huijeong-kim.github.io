<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on Dev. note</title><link>http://huijeong-kim.github.io/tags/rust/</link><description>Recent content in Rust on Dev. note</description><generator>Hugo -- 0.146.0</generator><language>kr</language><lastBuildDate>Fri, 02 Feb 2024 16:08:51 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>빌드 스크립트 build.rs</title><link>http://huijeong-kim.github.io/post/2024-02-02-cargo-build-run-if-changed/</link><pubDate>Fri, 02 Feb 2024 16:08:51 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2024-02-02-cargo-build-run-if-changed/</guid><description>&lt;p>Rust 프로젝트에서 third-party non-Rust 코드를 함께 컴파일해야 할 때 &lt;a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html">빌드 스크립트&lt;/a>를 이용할 수 있다. 별도의 스크립트를 실행하지 않고 프로젝트에 통합할수 있다는 점이 굉장히 유용한 편!&lt;/p>
&lt;p>이 스크립트를 사용하는 예제로는&lt;/p>
&lt;ul>
&lt;li>&lt;code>bindgen&lt;/code>, &lt;code>cc&lt;/code> 등을 이용하여 non-Rust 코드를 컴파일, Rust 코드와 연결해야 할 때&lt;/li>
&lt;li>&lt;code>gRPC&lt;/code>, &lt;code>jsonschema&lt;/code> 등을 사용해 정의된 타입을 변환할 때&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;p>등이 있다. 이 스크립트를 사용할 때 주의해야 하는 소소한 점들을 정리했다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h2 id="buildrs-예제">build.rs 예제&lt;/h2>
&lt;p>Cargo는 컴파일 과정에서 build script를 빌드, 실행한다. 따라서 다음과 같은 빌드 스크립트는 패키지 컴파일 과정에서 &lt;code>hello.rs&lt;/code> 파일을 만들게 된다. 패키지의 코드는 &lt;code>hello.rs&lt;/code> 내 함수를 사용할 수 있다.&lt;/p></description></item><item><title>Exploring Rust Strings</title><link>http://huijeong-kim.github.io/post/2023-05-07-exploring-rust-strings/</link><pubDate>Sun, 07 May 2023 19:02:30 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2023-05-07-exploring-rust-strings/</guid><description>&lt;p>안녕하세요.&lt;/p>
&lt;p>오늘은 Rust의 문자열 개념을 간단하게 알아보고, 코드 작성 시 문자열 관련 혼란스러웠던 포인트들을 정리해 보고자 합니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h1 id="1-string-vs-str">1. String vs. str&lt;/h1>
&lt;p>&lt;code>String&lt;/code> 과 &lt;code>str&lt;/code> 는 모두 &lt;strong>valid&lt;/strong> UTF-8 문자열을 나타냅니다. Invalid UTF-8 데이터로 &lt;code>String&lt;/code> 타입을 생성할 수 없습니다. UTF-8, Unicode 등에 대한 설명은 생략합니다.&lt;/p>
&lt;p>Rust에서는 C와 같이 null-terminating string 개념을 사용하지 않습니다. 대신 &lt;code>String&lt;/code> 타입은 문자열과 그 길이를 갖고 있는 &lt;strong>&amp;ldquo;fat pointer&amp;rdquo;&lt;/strong> 입니다. &amp;ldquo;fat pointer&amp;quot;는 raw pointer과 additional metadata (e.g., length)를 갖고 있는 포인터를 의미합니다.&lt;/p></description></item><item><title>as operator in Rust</title><link>http://huijeong-kim.github.io/post/2023-05-02-rust-as-operator/</link><pubDate>Tue, 02 May 2023 19:00:30 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2023-05-02-rust-as-operator/</guid><description>&lt;p>안녕하세요.&lt;/p>
&lt;p>오늘은 Rust의 &lt;code>as&lt;/code> 를 사용한 type casting에 대해 알아보고자 합니다. C++ 프로그램에서는 잘못된 type 사용 으로 인한 오류를 종종 볼 수 있습니다. &lt;code>uint64_t&lt;/code> 값을 &lt;code>uint32_t&lt;/code> 값에 대입하여 잘못된 값으로 동작하는 경우가 그 예입니다. 조금은 어이 없는 실수이긴 한데, 생각보다 자주 발견됩니다. 이런 류의 버그는 처음 봤을 때 원인을 가늠하기 힘들기도 하지만, 고치기 귀찮거나 어렵기도 합니다. Type 재정의를 사용하지 않는 경우도 많고, 가끔씩은 통일할 필요가 크게 없는 경우도 있고, 의미 상 같은 변수를 모두 찾아내기 힘든 코드들도 종종 있습니다. 테스트를 더 잘 하면 된다고 하지만, 모든 변수에 대해 boundary test를 하는 건 현실적으로 조금 어렵습니다.&lt;/p></description></item><item><title>Polymorphism in Rust</title><link>http://huijeong-kim.github.io/post/2023-01-29-rust-polymorphism/</link><pubDate>Sun, 29 Jan 2023 18:58:03 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2023-01-29-rust-polymorphism/</guid><description>&lt;p>안녕하세요. 오늘은 rust에서 polymorphism을 활용하는 방법을 정리해 보고자 합니다.&lt;/p>
&lt;p>cpp 코드를 작성하던 습관 대로 Rust 코드를 작성하다 보면 막히는 부분 중 하나가 interface 클래스(pure virtual class)와 이를 통한 객체 전달 부분입니다. 단순히 trait으로 변환하여 코드를 작성하다 보면 쉽게 컴파일 에러 지옥에 빠지곤 하는데요..&lt;/p>
&lt;p>아주 간단한 composite design pattern 예제를 구현해 보면서 rust의 polymorphism 에 대해 알아보도록 하겠습니다. Composite pattern 예제로 많이 사용되는 File, Directory 구조를 표현해 보고자 합니다. File은 이름과 크기를 갖고 있는 객체로, Directory는 이름과 하위 파일 및 디렉토리를 갖는 객체로, 그리고 File, Directory 는 모두 Node 라는 interface를 구현하게 만들고자 합니다.&lt;/p></description></item><item><title>Rust로 Parameterised Test 작성하기</title><link>http://huijeong-kim.github.io/post/2022-08-28-parameterised-test/</link><pubDate>Sun, 28 Aug 2022 18:51:05 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-28-parameterised-test/</guid><description>&lt;p>Unit test를 작성 하다 보면 간단한 함수에 대해서도 꽤나 많은 수의 테스트 케이스를 작성하게 됩니다. Input 값의 조합, 특히나 Invalid Input 값의 조합은 무지 많아질 수 있기 때문 입니다. 그 모든 케이스를 하나 씩 테스트로 작성 하는 것은 꽤 귀찮기도 하고, 테스트 함수 작명 지옥에 빠지면서 테스트 가독성도 떨어지게 됩니다.&lt;/p>
&lt;p>이럴 때 사용할 수 있는 것이 &lt;a href="https://github.com/golang/go/wiki/TableDrivenTests">table-driven test&lt;/a>, 혹은 parameterised test 입니다. Input-Output 조합을 table로 표현하는 방식입니다.&lt;/p>
&lt;p>Rust로 간단한 함수의 parameterised test를 작성해 보고, rust의 &lt;code>test-case&lt;/code>, &lt;code>rtest&lt;/code> crate를 활용해 이를 더 간편하게 작성하는 방법을 알아보겠습니다.&lt;/p></description></item><item><title>Actix actor의 AsyncContext 활용하기 (2)</title><link>http://huijeong-kim.github.io/post/2022-08-27-actix-actor-async-ctx-2/</link><pubDate>Sat, 27 Aug 2022 18:47:08 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-27-actix-actor-async-ctx-2/</guid><description>&lt;p>&lt;a href="https://huijeong-kim.github.io/actix-actor-async-ctx-1/">지난 글&lt;/a>에 이어 Actix actor의 &lt;code>AsyncContext&lt;/code> 함수를 사용하는 방법을 알아봅니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="add_stream-add_message_stream">add_stream, add_message_stream&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fn&lt;/span> &lt;span style="color:#50fa7b">add_stream&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">mut&lt;/span> self, fut: &lt;span style="color:#50fa7b">S&lt;/span>) -&amp;gt; &lt;span style="color:#50fa7b">SpawnHandle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S: &lt;span style="color:#50fa7b">Stream&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">&amp;#39;static&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A: &lt;span style="color:#50fa7b">StreamHandler&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S::Item&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fn&lt;/span> &lt;span style="color:#50fa7b">add_message_stream&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">mut&lt;/span> self, fut: &lt;span style="color:#50fa7b">S&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S: &lt;span style="color:#50fa7b">Stream&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">&amp;#39;static&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S::Item: &lt;span style="color:#50fa7b">Message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A: &lt;span style="color:#50fa7b">Handler&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S::Item&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Context에 stream을 등록하는 함수입니다. 두 함수는 거의 비슷하나 차이점은 &lt;code>add_message_stream&lt;/code>은 stream error를 무시한다는 점입니다.&lt;/p></description></item><item><title>Actix actor의 AsyncContext 활용하기 (1)</title><link>http://huijeong-kim.github.io/post/2022-08-21-actix-actor-async-ctx-1/</link><pubDate>Sun, 21 Aug 2022 18:43:23 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-21-actix-actor-async-ctx-1/</guid><description>&lt;p>Actix에서 actor를 생성하면 해당 actor를 실행시키는 문맥(context)에 해당하는 &lt;code>Context&lt;/code>가 생성 되고, &lt;code>Context&lt;/code>는 다양한 actor의 동작을 정의합니다. 그 중 &lt;code>Context&lt;/code>를 활용해서 actor가 future를 실행, 취소, 기다리는 방법을 알아봅니다. 아래 예제 코드들은 actix 0.13.0 버전을 사용했습니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="actor-context">Actor Context&lt;/h3>
&lt;p>먼저, Actor의 &lt;code>Context&lt;/code>의 정의, 생성 시기를 알아보겠습니다.&lt;/p>
&lt;p>사용자가 정의한 struct를 actor로 만들기 위해서 최소로 필요한 것은 Actor trait을 구현(implement) 하고 Context를 정의하는 것 입니다.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">MyActor&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">impl&lt;/span> Actor &lt;span style="color:#ff79c6">for&lt;/span> MyActor {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">type&lt;/span> &lt;span style="color:#50fa7b">Context&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> Context&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Self&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위 actor는 다음과 같이 생성되고 시작될 수 있습니다.&lt;/p></description></item><item><title>Actix actor를 사용하는 두 가지 방법</title><link>http://huijeong-kim.github.io/post/2022-08-17-actix-actor-usage/</link><pubDate>Wed, 17 Aug 2022 18:39:01 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-17-actix-actor-usage/</guid><description>&lt;p>Actix에서 actor를 사용하는 방법은 두 가지로 나눌 수 있을 것 같습니다. 첫 번째는 특정 task를 실행시키는 용도로, client가 message를 보내면 이를 받아서 처리하는 actor를 만드는 것 이고, 두 번째는 주기적으로 task를 실행시키는 actor를 만드는 것 입니다. 두 경우 각각 actor를 사용하는 방법에 대해 알아봅니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="1-message를-처리하는-actor">1. Message를 처리하는 actor&lt;/h3>
&lt;p>Actor를 시작하면 &lt;code>Addr&lt;/code>가 리턴됩니다. &lt;code>Addr&lt;/code>는 해당 actor에게 message를 전달할 수 있는 channel 입니다. Client module은 이 &lt;code>addr&lt;/code>를 통해서 message를 전달할 수 있습니다.&lt;/p></description></item><item><title>Expand Rust Macros</title><link>http://huijeong-kim.github.io/post/2022-08-14-expand-rust-macros/</link><pubDate>Sun, 14 Aug 2022 18:09:18 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-14-expand-rust-macros/</guid><description>&lt;p>Rust에서 사용 된 macro의 구현이 궁금할 때 &lt;a href="https://github.com/dtolnay/cargo-expand">cargo expand&lt;/a>를 사용할 수 있습니다.&lt;/p>
&lt;h3 id="설치">설치&lt;/h3>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cargo install cargo-expand&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
 &lt;/p>
&lt;h3 id="사용법">사용법&lt;/h3>
&lt;p>&lt;a href="https://huijeong-kim.github.io/run-grpc-server-in-actix/">이전 글&lt;/a>에서 사용한 코드를 expand해 봅시다. &lt;code>cargo expand&lt;/code> 시 expand 된 코드가 stdout으로 출력됩니다.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cargo expand --bin actix-and-tonic&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>이 예제는 하나의 파일로 이루어져 있어 binary를 지정했지만, 특정 module 코드를 expand하기 위해서 module을 지정할 수도 있습니다.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cargo expand path::to:module&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p> &lt;/p>
&lt;p>Message 구현에 사용했던 Message macro는&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#[derive(Default, Message)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#[rtype(result = &lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;String&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">GetName&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이렇게 풀어쓸 수 있습니다.&lt;/p></description></item><item><title>Actix에서 gRPC Server 시작하기</title><link>http://huijeong-kim.github.io/post/2022-08-14-run-grpc-server-in-actix/</link><pubDate>Sun, 14 Aug 2022 17:24:46 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-14-run-grpc-server-in-actix/</guid><description>&lt;p>Rust로 gRPC로 외부와 통신하는 Actix 기반 application을 작성하는 방법을 알아봅니다. gRPC Server는 Tonic을 사용해 구현합니다. Tonic과 Actix는 둘 다 tokio 기반 application으로, tokio Runtime 위에서 동작합니다. 같은 tokio Runtime에 gRPC Server와 Actor System을 실행시켜 보겠습니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="tonic을-사용해-grpc-server-시작하기">Tonic을 사용해 gRPC Server 시작하기&lt;/h3>
&lt;p>Tonic을 사용하면 다음과 같은 간단한 Server 실행 코드를 포함한 Async Block(Future)을 Tokio Runtime에서 실행하여 gRPC Server를 시작할 수 있습니다. 아래 코드는 Tonic repo 내 &lt;a href="https://github.com/hyperium/tonic/blob/master/examples/src/helloworld/server.rs">helloworld exmaple&lt;/a>에서 &lt;code>tonic::main&lt;/code> 매크로를 풀어 쓴 것입니다.&lt;/p></description></item></channel></rss>