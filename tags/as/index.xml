<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>as on my dev note</title>
    <link>http://huijeong-kim.github.io/tags/as/</link>
    <description>Recent content in as on my dev note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr</language>
    <lastBuildDate>Tue, 02 May 2023 19:00:30 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/as/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>as operator in Rust</title>
      <link>http://huijeong-kim.github.io/post/2023-05-02-rust-as-operator/</link>
      <pubDate>Tue, 02 May 2023 19:00:30 +0900</pubDate>
      
      <guid>http://huijeong-kim.github.io/post/2023-05-02-rust-as-operator/</guid>
      <description>안녕하세요.
오늘은 Rust의 as 를 사용한 type casting에 대해 알아보고자 합니다. C++ 프로그램에서는 잘못된 type 사용 으로 인한 오류를 종종 볼 수 있습니다. uint64_t 값을 uint32_t 값에 대입하여 잘못된 값으로 동작하는 경우가 그 예입니다. 조금은 어이 없는 실수이긴 한데, 생각보다 자주 발견됩니다. 이런 류의 버그는 처음 봤을 때 원인을 가늠하기 힘들기도 하지만, 고치기 귀찮거나 어렵기도 합니다. Type 재정의를 사용하지 않는 경우도 많고, 가끔씩은 통일할 필요가 크게 없는 경우도 있고, 의미 상 같은 변수를 모두 찾아내기 힘든 코드들도 종종 있습니다.</description>
    </item>
    
  </channel>
</rss>
