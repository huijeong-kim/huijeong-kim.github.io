<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Actix on Dev. note</title><link>http://huijeong-kim.github.io/tags/actix/</link><description>Recent content in Actix on Dev. note</description><generator>Hugo -- 0.146.0</generator><language>kr</language><lastBuildDate>Sat, 27 Aug 2022 18:47:08 +0900</lastBuildDate><atom:link href="http://huijeong-kim.github.io/tags/actix/index.xml" rel="self" type="application/rss+xml"/><item><title>Actix actor의 AsyncContext 활용하기 (2)</title><link>http://huijeong-kim.github.io/post/2022-08-27-actix-actor-async-ctx-2/</link><pubDate>Sat, 27 Aug 2022 18:47:08 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-27-actix-actor-async-ctx-2/</guid><description>&lt;p>&lt;a href="https://huijeong-kim.github.io/actix-actor-async-ctx-1/">지난 글&lt;/a>에 이어 Actix actor의 &lt;code>AsyncContext&lt;/code> 함수를 사용하는 방법을 알아봅니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="add_stream-add_message_stream">add_stream, add_message_stream&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fn&lt;/span> &lt;span style="color:#50fa7b">add_stream&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">mut&lt;/span> self, fut: &lt;span style="color:#50fa7b">S&lt;/span>) -&amp;gt; &lt;span style="color:#50fa7b">SpawnHandle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S: &lt;span style="color:#50fa7b">Stream&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">&amp;#39;static&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A: &lt;span style="color:#50fa7b">StreamHandler&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S::Item&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fn&lt;/span> &lt;span style="color:#50fa7b">add_message_stream&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">mut&lt;/span> self, fut: &lt;span style="color:#50fa7b">S&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S: &lt;span style="color:#50fa7b">Stream&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">&amp;#39;static&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S::Item: &lt;span style="color:#50fa7b">Message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A: &lt;span style="color:#50fa7b">Handler&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>S::Item&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Context에 stream을 등록하는 함수입니다. 두 함수는 거의 비슷하나 차이점은 &lt;code>add_message_stream&lt;/code>은 stream error를 무시한다는 점입니다.&lt;/p></description></item><item><title>Actix actor의 AsyncContext 활용하기 (1)</title><link>http://huijeong-kim.github.io/post/2022-08-21-actix-actor-async-ctx-1/</link><pubDate>Sun, 21 Aug 2022 18:43:23 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-21-actix-actor-async-ctx-1/</guid><description>&lt;p>Actix에서 actor를 생성하면 해당 actor를 실행시키는 문맥(context)에 해당하는 &lt;code>Context&lt;/code>가 생성 되고, &lt;code>Context&lt;/code>는 다양한 actor의 동작을 정의합니다. 그 중 &lt;code>Context&lt;/code>를 활용해서 actor가 future를 실행, 취소, 기다리는 방법을 알아봅니다. 아래 예제 코드들은 actix 0.13.0 버전을 사용했습니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="actor-context">Actor Context&lt;/h3>
&lt;p>먼저, Actor의 &lt;code>Context&lt;/code>의 정의, 생성 시기를 알아보겠습니다.&lt;/p>
&lt;p>사용자가 정의한 struct를 actor로 만들기 위해서 최소로 필요한 것은 Actor trait을 구현(implement) 하고 Context를 정의하는 것 입니다.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">MyActor&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">impl&lt;/span> Actor &lt;span style="color:#ff79c6">for&lt;/span> MyActor {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">type&lt;/span> &lt;span style="color:#50fa7b">Context&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> Context&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Self&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위 actor는 다음과 같이 생성되고 시작될 수 있습니다.&lt;/p></description></item><item><title>Actix actor를 사용하는 두 가지 방법</title><link>http://huijeong-kim.github.io/post/2022-08-17-actix-actor-usage/</link><pubDate>Wed, 17 Aug 2022 18:39:01 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-17-actix-actor-usage/</guid><description>&lt;p>Actix에서 actor를 사용하는 방법은 두 가지로 나눌 수 있을 것 같습니다. 첫 번째는 특정 task를 실행시키는 용도로, client가 message를 보내면 이를 받아서 처리하는 actor를 만드는 것 이고, 두 번째는 주기적으로 task를 실행시키는 actor를 만드는 것 입니다. 두 경우 각각 actor를 사용하는 방법에 대해 알아봅니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="1-message를-처리하는-actor">1. Message를 처리하는 actor&lt;/h3>
&lt;p>Actor를 시작하면 &lt;code>Addr&lt;/code>가 리턴됩니다. &lt;code>Addr&lt;/code>는 해당 actor에게 message를 전달할 수 있는 channel 입니다. Client module은 이 &lt;code>addr&lt;/code>를 통해서 message를 전달할 수 있습니다.&lt;/p></description></item><item><title>Actix에서 gRPC Server 시작하기</title><link>http://huijeong-kim.github.io/post/2022-08-14-run-grpc-server-in-actix/</link><pubDate>Sun, 14 Aug 2022 17:24:46 +0900</pubDate><guid>http://huijeong-kim.github.io/post/2022-08-14-run-grpc-server-in-actix/</guid><description>&lt;p>Rust로 gRPC로 외부와 통신하는 Actix 기반 application을 작성하는 방법을 알아봅니다. gRPC Server는 Tonic을 사용해 구현합니다. Tonic과 Actix는 둘 다 tokio 기반 application으로, tokio Runtime 위에서 동작합니다. 같은 tokio Runtime에 gRPC Server와 Actor System을 실행시켜 보겠습니다.&lt;/p>
&lt;p> 
 &lt;/p>
&lt;h3 id="tonic을-사용해-grpc-server-시작하기">Tonic을 사용해 gRPC Server 시작하기&lt;/h3>
&lt;p>Tonic을 사용하면 다음과 같은 간단한 Server 실행 코드를 포함한 Async Block(Future)을 Tokio Runtime에서 실행하여 gRPC Server를 시작할 수 있습니다. 아래 코드는 Tonic repo 내 &lt;a href="https://github.com/hyperium/tonic/blob/master/examples/src/helloworld/server.rs">helloworld exmaple&lt;/a>에서 &lt;code>tonic::main&lt;/code> 매크로를 풀어 쓴 것입니다.&lt;/p></description></item></channel></rss>